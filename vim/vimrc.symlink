" ----------------------------------------------------------------------------
"  General
" ----------------------------------------------------------------------------
set enc=utf-8
set fenc=utf-8
set nocompatible
set history=1000          " keep 50 lines of command line history
set noexrc
set paste
set tabpagemax=50
set viminfo='20,\"50      " .viminfo, no more than 50 lines of registers
set autoread              " reload files (no local changes only)

call pathogen#infect()    " Use Pathogen for plugins
filetype plugin indent on

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set wrap                   " wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set shiftround             " round > and < to nearest shiftwitdh
set tabstop=2
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..

" ----------------------------------------------------------------------------
"  Backups
" ----------------------------------------------------------------------------
"set nobackup                           " do not keep backups after close
"set nowritebackup                      " do not keep a backup while working
"set noswapfile                         " don't keep swp files either
"set backupdir=$HOME/.vim/backup        " store backups under ~/.vim/backup
"et backupcopy=yes                     " keep attributes of original file
"set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
set directory=~/.vim/swp               " keep swp files under ~/.vim/swap

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set rnu                    " use relative numbering
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

set showmode
set statusline=%F%m%r%h%w\ %#LineNr#%{fugitive#statusline()}%#StatusLine#\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set scrolloff=3
"set ttyfast
"set showcmd                " Show (partial) command in status line.
set nofoldenable

set report=0               " report when > 0 lines changed by command

""---- join lines that end with a sentance, put in two spaces
set joinspaces

""---- Completion improvements
set completeopt=longest,menuone

setlocal comments-=:#
set lazyredraw          " Don't redraw the screen during macro execution.
set hidden              " Enable 'hidden' buffers

let g:git_branch_status_head_current = 1
let g:git_branch_status_ignore_remotes = 1
let g:git_branch_status_text = ''
let g:git_branch_status_nogit = ''

autocmd FileType gitcommit DiffGitCached | wincmd p

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" ---------------------------------------------------------------------------
" Colors / Theme
" ---------------------------------------------------------------------------
set guifont=FreeMono\ Bold\ 10
set gfn=FreeMono\ Bold\ 10
set background=dark
set t_Co=256         " use 256 colors

syntax enable
colorscheme molokai

if has("gui")
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
else
  set mousehide
  "set mouse=a
  "set ttymouse=xterm2
endif

" ---------------------------------------------------------------------------
"  Highlight
" ---------------------------------------------------------------------------
highlight Comment         ctermfg=DarkGrey guifg=#444444
highlight StatusLineNC    ctermfg=Black    ctermbg=DarkGrey cterm=bold
highlight StatusLine      ctermbg=Black    ctermfg=LightGrey
highlight SpecialKey      ctermfg=DarkGray ctermbg=Black

" ----------------------------------------------------------------------------
"   Highlight Trailing Whitespace
" ----------------------------------------------------------------------------
set list
"set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set listchars=tab:»·,trail:·
set showbreak=↪

" ----------------------------------------------------------------------------
"  Mappings
" ----------------------------------------------------------------------------

" Set the leader
let mapleader = ';'

" Toggle NERD Tree
map <leader>n :NERDTreeToggle <CR><Esc>

" Date/Time Stamp
map <leader>t a<c-r>=strftime("%Y-%m-%d %H:%M:%S")<CR><Esc>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" select all
map <leader>a ggVG

" Disable Ruler
nnoremap <F7> :set nonumber!<CR>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" Make Y behave like other capitals
map Y y$

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Disable arrow keys for hjkl training
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"---------------------------------------------------
"----- various encryption and decryption stuff -----
"---------------------------------------------------
"
"---- perform rot13 encrpytion using the tr script
map :rot :%!tr A-Za-z N-ZA-Mn-za-m
"----- gnupg encryption and decryption
"---- encrypt and sign the message then armor it too
map ;e :%!/bin/sh -c 'gpg -se -a 2>/dev/tty'
"---- just encrypt and armor the message
map ;E :%!/bin/sh -c 'gpg -e -a 2>/dev/tty'
"---- decrypt
map ;d :/^-----BEG/,/^-----END/!/bin/sh -c 'gpg -d 2>/dev/tty'
"----- sign
map ;s :,$! /bin/sh -c 'gpg --clearsign 2>/dev/tty'

"----- NERD Tree
map ;n :NERDTreeToggle <CR><Esc>

"----- gundo
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width = 60
let g:gundo_preview_height = 40
let g:gundo_right = 1

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

"Disable autocompletion popup.
let g:AutoComplPop_NotEnableAtStartup = 1

"----- viewoutput configuration
let g:viewoutput_newbuffer="bot 5new"

map <C-c> <Plug>Traditionalj

"----- Make JSON readable.
map ;j :%!perl -MJSON -e 'local $/; my $j =JSON->new(); print $j->pretty()->encode($j->decode(<>));'<CR>

" ----------------------------------------------------------------------------
" Searching
" ----------------------------------------------------------------------------
set hlsearch               " highlight searches
set incsearch              " do incremental searching
set ignorecase             " ignore case when searching
set smartcase              " ... unless ther's a cApItOl"

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------
set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set laststatus=2           " always show the status line
set visualbell             " shut the fuck up

" ---------------------------------------------------------------------------
"  Printing Options
" ---------------------------------------------------------------------------
set printoptions=header:2,syntax:a,number:y,wrap:y,duplex:long,collate:y,jobsplit:y,paper:letter

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>


" ---------------------------------------------------------------------------
"  Type specific things
" ---------------------------------------------------------------------------
au BufRead,BufNewFile *.md       set wrap linebreak spell filetype=markdown
au BufRead,BufNewFile *.markdown set wrap linebreak spell filetype=markdown


