" Use Pathogen for plugins
execute pathogen#infect()

" Use vim-plug for plugins
call plug#begin('~/.vim/plugged')

" Editing
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
Plug 'sbdchd/neoformat'
Plug 'Shougo/denite.nvim'

Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-scripts/L9'

Plug 'tpope/vim-fugitive'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'godlygeek/tabular'
"Plug 'kien/rainbow_parentheses.vim'
Plug 'tomtom/tcomment_vim'
"Plug 'Lokaltog/vim-easymotion'
Plug 'honza/vim-snippets'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'raimondi/delimitmate'
"Plug 'valloric/youcompleteme'

" Syntax
Plug 'scrooloose/syntastic'
Plug 'voxpupuli/vim-puppet'
Plug 'hdima/python-syntax'
Plug 'elzr/vim-json'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-git'
"Plug 'chase/vim-ansible-yaml'
Plug 'markcornick/vim-terraform'
Plug 'evanmiller/nginx-vim-syntax'

" Lang
Plug 'vim-ruby/vim-ruby'
Plug 'jnwhiteh/vim-golang'

" Colors
Plug 'chase/focuspoint-vim'
Plug 'noahfrederick/vim-noctu'
Plug 'tomasr/molokai'
Plug 'jnurmine/Zenburn'
Plug 'sickill/vim-monokai'
Plug 'chriskempson/base16-vim'
Plug 'w0ng/vim-hybrid'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'jamessan/vim-gnupg'

call plug#end()


" Enable filetype plugin
filetype indent on
filetype plugin on
syntax on

"
" General
set encoding=utf8
set nocompatible
set t_Co=256

"
" Colors
set background=dark
"colorscheme molokai

if has("gui_running")
  colorscheme solarized
else
  "colorscheme focuspoint
  colorscheme hybrid
endif

"
"set guifont=Source\ Code\ Pro:h14
set guifont=Hack\ 12
set guioptions+=i  " show Vim icon in Taskbar
set guioptions-=a  "remove autoselect
set guioptions-=A  "remove autoselect
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar
set guioptions-=R  "remove right-hand scroll bar if there is a vertical split
set guioptions-=L  "remove left-hand scroll bar if there is a vertical split
"
" Text Format
set ai
set si
set wrap
set autoread
set softtabstop=2
set shiftwidth=2
set tabstop=2
set shiftround             " round > and < to nearest shiftwitdh
set expandtab              " expand tabs to spaces
set smarttab               " insert blanks according to shiftwidth, tabstop, etc
set virtualedit=block      " allow virtual edit in visual block ..

"
" UI
set noerrorbells novisualbell t_vb=
set backspace=eol,start,indent
set cursorline
set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
"set redraw
set number                 " line numbers
set rnu                    " use relative numbering
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
" set ch=2                   " command line height
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set showmode
set statusline=%F%m%r%h%w\ %#LineNr#%{fugitive#statusline()}%#StatusLine#\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set scrolloff=3
"set ttyfast
"set showcmd                " Show (partial) command in status line.
set nofoldenable
"set report=0               " report when > 0 lines changed by command
set completeopt=longest,menuone

setlocal comments-=:#
set hidden              " Enable 'hidden' buffers

"
" Backups
set directory=~/.vim/swp        " keep swp files under ~/.vim/swap

"
" Searching
set hlsearch               " highlight searches
set incsearch              " do incremental searching
set ignorecase             " ignore case when searching
set smartcase              " ... unless ther's a cApItOl"

"
"  Highlight
highlight Comment         ctermfg=DarkGrey guifg=#444444
highlight StatusLineNC    ctermfg=Black    ctermbg=DarkGrey cterm=bold
highlight StatusLine      ctermbg=Black    ctermfg=LightGrey
highlight SpecialKey      ctermfg=DarkGray ctermbg=Black

"
" Highlight Trailing Whitespace
set list
set listchars=tab:»·,trail:·
"set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
"set showbreak=↪

"
" Visual Cues
set mat=2
set showmatch
set laststatus=2
"set visualbell

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

"
" Disable autocompletion popup.
let g:AutoComplPop_NotEnableAtStartup = 1

"----- viewoutput configuration
let g:viewoutput_newbuffer="bot 5new"

"  Airline
let g:airline_theme='powerlineish'

"
" Printing Options
set printoptions=header:2,syntax:a,number:y,wrap:y,duplex:long,collate:y,jobsplit:y,paper:letter

" ----------
"  Strip all trailing whitespace in file
" ----------
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red
set spelllang=en_us

" --------------------
"  Type specific things
" --------------------
au BufRead,BufNewFile *.md       set wrap linebreak spell filetype=markdown
au BufRead,BufNewFile *.markdown set wrap linebreak spell filetype=markdown
au BufRead,BufNewFile *pf.conf*  set filetype=pf
au BufRead,BufNewFile *.py       set softtabstop=4 shiftwidth=4 tabstop=4
au BufRead,BufNewFile *.rb       set softtabstop=2 shiftwidth=2 tabstop=2
au BufRead,BufNewFile *.yml      set softtabstop=2 shiftwidth=2 tabstop=2
au BufRead,BufNewFile *.ddl      set filetype=mcollective_ddl
au BufRead,BufNewFile *.aug      set filetype=augeas
"au FileType gitcommit DiffGitCached | wincmd v
au BufRead $HOME/.mutt/temp*     set syntax=mail colorscheme molokai
au Filetype mail                 setl textwidth=72 wrap nocp spell
au FileType gitcommit            set spell
au FileType make                 set noexpandtab shiftwidth=8 tabstop=8 cindent softtabstop=0
au FileType sh                   set expandtab shiftwidth=4 tabstop=4 cindent softtabstop=4
au FileType yaml                 set expandtab shiftwidth=2 tabstop=2 cindent softtabstop=2

" --------------------
"  Plugin specifics
" --------------------
let g:syntastic_puppet_checkers = ['puppetlint', 'puppet']
let g:syntastic_puppet_puppetlint_args = '--no-80chars-check --no-documentation-check --no-class_parameter_defaults-check --no-class_inherits_from_params_class-check'

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_exe = 'python3'
let g:syntastic_python_flake8_args = ['-m', 'flake8']

let g:indent_guides_guide_size = 1
let g:pymode_python = 'python3'
let python_highlight_all = 1
let g:python3_host_prog = '/home/zach/local/vim/bin/python'

"let g:ycm_python_binary_path = '~/local/vim/bin/python'
"let g:ycm_server_python_interpreter = '~/local/vim/bin/python'

let g:deoplete#enable_at_startup = 1

"let g:ycm_python_binary_path = '/home/zach/local/vim/bin/python'
"let g:ycm_server_python_interpreter = '/home/zach/local/vim/bin/python'
"let g:ycm_path_to_python_interpreter = '/home/zach/local/vim/bin/python'

let g:deoplete#enable_at_startup = 1
"let g:python_host_prog = '/full/path/to/neovim2/bin/python'
"let g:python3_host_prog = '/full/path/to/neovim3/bin/python'

" --------------------
"  Maps
" --------------------

" Set the leader
let mapleader = ';'

noremap <Leader>s :update<CR>
noremap <Leader>v :vsplit<CR>
noremap <Leader>c :close<CR>
noremap <Leader>e :Explore<CR>

" Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

set clipboard+=unnamedplus


" Date/Time Stamp
map <leader>t a<c-r>=strftime("%Y-%m-%d %H:%M:%S")<CR><Esc>


" Disable Ruler
nnoremap <F7> :set nonumber!<CR>

" Replace DNS ZONE SOA
nnoremap <F8> /\<\d\{10}\><CR>ce<C-r>=strftime("%Y%m%d00")<CR><Esc>:echo @"<CR>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" select all
"map <leader>a ggVG

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" Make Y behave like other capitals
map Y y$

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Disable arrow keys for hjkl training
"inoremap  <Up>     <NOP>
"inoremap  <Down>   <NOP>
"inoremap  <Left>   <NOP>
"inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Better Command line Editing
"cnoremap <C-j> <t_kd>
"cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Toggle listing invisible characters
nmap <leader>l :set list!<CR>

"
" Tabs
"nnoremap <silent><CSI>] :tabnext<CR>
"nnoremap <silent><CSI>[ :tabprevious<CR>
"nnoremap <silent><S-n> :tabnext<CR>
"nnoremap <silent><S-p> :tabprevious<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-p> :tabprevious<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <C-k> :tabclose<CR>

"
"  FuzzyFinder
"noremap <Leader>f :FufFileWithCurrentBufferDir<CR>
"noremap <Leader>F :FufFile<CR>
"noremap <Leader>v :FufCoverageFile<CR>
"noremap <Leader>b :FufBuffer<CR>
"noremap <Leader>c :FufDirWithFullCwd<CR>
"noremap <Leader>u :FufRenewCache<CR>
"noremap <Leader>w :bdelete<CR>
"noremap <F1> :FufHelp<CR>

"
"  Tabularize
nnoremap <Leader>aa :Tabularize /=><CR>
vnoremap <Leader>aa :Tabularize /=><CR>
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:\zs<CR>
vnoremap <Leader>a: :Tabularize /:\zs<CR>

"
"  CtrlP
"let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
"let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_show_hidden = 1
noremap <Leader>f :CtrlPCurFile<CR>
noremap <Leader>d :CtrlP<CR>
noremap <Leader>s :CtrlP 

"
"  Intent Guides
map <F6> :IndentGuidesToggle<CR>
